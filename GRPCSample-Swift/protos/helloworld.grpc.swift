//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: protos/helloworld.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Helloworld_GreeterClient, then call methods of this protocol to make API calls.
internal protocol Helloworld_GreeterClientProtocol: GRPCClient {
  func sayHello(
    _ request: Helloworld_HelloRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Helloworld_HelloRequest, Helloworld_HelloReply>

  func sayHelloAgain(
    _ request: Helloworld_HelloRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Helloworld_HelloRequest, Helloworld_HelloReply>

}

extension Helloworld_GreeterClientProtocol {

  /// Sends a greeting
  ///
  /// - Parameters:
  ///   - request: Request to send to SayHello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sayHello(
    _ request: Helloworld_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Helloworld_HelloRequest, Helloworld_HelloReply> {
    return self.makeUnaryCall(
      path: "/helloworld.Greeter/SayHello",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to SayHelloAgain
  ///
  /// - Parameters:
  ///   - request: Request to send to SayHelloAgain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sayHelloAgain(
    _ request: Helloworld_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Helloworld_HelloRequest, Helloworld_HelloReply> {
    return self.makeUnaryCall(
      path: "/helloworld.Greeter/SayHelloAgain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Helloworld_GreeterClient: Helloworld_GreeterClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the helloworld.Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Helloworld_CustomGreeterClient, then call methods of this protocol to make API calls.
internal protocol Helloworld_CustomGreeterClientProtocol: GRPCClient {
  func helloAgain(
    _ request: Helloworld_HelloRequestAgain,
    callOptions: CallOptions?
  ) -> UnaryCall<Helloworld_HelloRequestAgain, Helloworld_HelloReplyAgain>

  func helloAgainStream(
    _ request: Helloworld_HelloRequestAgain,
    callOptions: CallOptions?,
    handler: @escaping (Helloworld_HelloReplyAgain) -> Void
  ) -> ServerStreamingCall<Helloworld_HelloRequestAgain, Helloworld_HelloReplyAgain>

}

extension Helloworld_CustomGreeterClientProtocol {

  /// Unary call to HelloAgain
  ///
  /// - Parameters:
  ///   - request: Request to send to HelloAgain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func helloAgain(
    _ request: Helloworld_HelloRequestAgain,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Helloworld_HelloRequestAgain, Helloworld_HelloReplyAgain> {
    return self.makeUnaryCall(
      path: "/helloworld.CustomGreeter/HelloAgain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Server streaming call to HelloAgainStream
  ///
  /// - Parameters:
  ///   - request: Request to send to HelloAgainStream.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func helloAgainStream(
    _ request: Helloworld_HelloRequestAgain,
    callOptions: CallOptions? = nil,
    handler: @escaping (Helloworld_HelloReplyAgain) -> Void
  ) -> ServerStreamingCall<Helloworld_HelloRequestAgain, Helloworld_HelloReplyAgain> {
    return self.makeServerStreamingCall(
      path: "/helloworld.CustomGreeter/HelloAgainStream",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }
}

internal final class Helloworld_CustomGreeterClient: Helloworld_CustomGreeterClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the helloworld.CustomGreeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

